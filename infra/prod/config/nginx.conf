user nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events { 
    worker_connections 1024; 
}

http {
    include /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" "$request_uri" "$uri"'
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;    
    sendfile on;
    keepalive_timeout 65;

    upstream docker-app {
	include /etc/nginx/inc.d/blue-green.inc; # blue/green 배포를 위한 변수파일 추가
    }

    # 80포트(http)로 요청이 올 경우 443포트(https)로 redirect
    server {
        listen 80;
        server_name jewoos.site;

        location ~ /.well-known/acme-challenge {
                allow all;
                root /var/www/certbot;
		try_files $uri =404;
        }

        location / {
                return 301 https://$host$request_uri;
        }    
    }

    # Allow-Origin 설정 (localhost:3000, whatpl.com)
    map $http_origin $allow_origin {
	"http://localhost:3000" $http_origin;
        ~^https?://(.*\.)?whatpl.com(:\d+)?$ $http_origin;
        default "";
    }

    server {
	listen 443 ssl;
	server_name jewoos.site;

	ssl_certificate /etc/letsencrypt/live/jewoos.site/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/jewoos.site/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf; # 보안 강화를 위한 옵션 추가
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;   # 보안 강화를 위한 옵션 추가

        location / {
            # CORS - Pre-flight 요청 설정
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $allow_origin always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT, PATCH';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            # CORS - 다른 origin 허용
            add_header 'Access-Control-Allow-Origin' $allow_origin always;
            # CORS - 쿠키 전송을 위한 헤더 추가
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            # reverse-proxy 설정
            proxy_pass         http://docker-app;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
        }
    }
}
